////////////////////////////////////////////////////////////////////////////////////////////////////

package cmd

////////////////////////////////////////////////////////////////////////////////////////////////////

import (
	"fmt"
	"os"
	"path/filepath"
)

////////////////////////////////////////////////////////////////////////////////////////////////////

// parse repo size
func repoSize(repo string) (string, error) {
	var size int
	err := filepath.Walk(repo, func(_ string, info os.FileInfo, err error) error {
		if err == nil && !info.IsDir() {
			size += int(info.Size())
		}
		return err
	})
	return formatRepoSize(size), err
}

////////////////////////////////////////////////////////////////////////////////////////////////////

func formatRepoSize(size int) string {
	const (
		KB = 1024
		MB = KB * 1024
		GB = MB * 1024
	)

	switch {
	case size >= GB:
		return fmt.Sprintf("%.2f GB", float64(size)/float64(GB))
	case size >= MB:
		return fmt.Sprintf("%.2f MB", float64(size)/float64(MB))
	case size >= KB:
		return fmt.Sprintf("%.2f KB", float64(size)/float64(KB))
	default:
		return fmt.Sprintf("%d bytes", size)
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
